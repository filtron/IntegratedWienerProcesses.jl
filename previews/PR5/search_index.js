var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = IntegratedWienerProcesses","category":"page"},{"location":"#IntegratedWienerProcesses","page":"Home","title":"IntegratedWienerProcesses","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for IntegratedWienerProcesses.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [IntegratedWienerProcesses]","category":"page"},{"location":"#IntegratedWienerProcesses.ReverseTaylor","page":"Home","title":"IntegratedWienerProcesses.ReverseTaylor","text":"ReverseTaylor\n\nType for representing state-space realizations in terms of Taylor coefficients in reverse order. That is the state-vector is of the form:\n\nx = [D^n y, D^(n-1)y, ..., Dy, y]\n\n\n\n\n\n","category":"type"},{"location":"#IntegratedWienerProcesses.dim-Tuple{IWP}","page":"Home","title":"IntegratedWienerProcesses.dim","text":"dim(M::IWP)\n\nComputes the number of dimensions of M.\n\n\n\n\n\n","category":"method"},{"location":"#IntegratedWienerProcesses.ndiff-Tuple{IWP}","page":"Home","title":"IntegratedWienerProcesses.ndiff","text":"ndiff(M::IWP)\n\nComputes the number of times M is differentiable.\n\n\n\n\n\n","category":"method"},{"location":"#IntegratedWienerProcesses.ssparams-Union{Tuple{T}, Tuple{IWP{T}, AbstractRealizationMethod}} where T","page":"Home","title":"IntegratedWienerProcesses.ssparams","text":"ssparams(model::IWP{T}, method::AbstractRealizationMethod) where {T}\n\nComputes the state-space matrices A, B, C for model model using realization method method.\n\n\n\n\n\n","category":"method"},{"location":"#IntegratedWienerProcesses.state2diff_matrix-Union{Tuple{T}, Tuple{IWP{T}, Integer, ReverseTaylor}} where T","page":"Home","title":"IntegratedWienerProcesses.state2diff_matrix","text":"state2diff_matrix(model::IWP{T}, m::Integer, method::AbstractRealizationMethod) where {T}\n\nComputes the matrix Em such that Dy = Em * x, where x is the state vector associated with realization method method.\n\n\n\n\n\n","category":"method"},{"location":"#IntegratedWienerProcesses.transition_cov-Union{Tuple{T}, Tuple{IWP{T}, Real, AbstractRealizationMethod}} where T","page":"Home","title":"IntegratedWienerProcesses.transition_cov","text":"transition_cov(model::IWP{T}, dt::T, method::AbstractRealizationMethod) where {T}\n\nComputes the transition covariance of the model model, with step-size dt, using realization method method.\n\n\n\n\n\n","category":"method"},{"location":"#IntegratedWienerProcesses.transition_cov_cholf-Union{Tuple{T}, Tuple{IWP{T}, Real, AbstractRealizationMethod}} where T","page":"Home","title":"IntegratedWienerProcesses.transition_cov_cholf","text":"transition_cov_cholf(model::IWP{T}, dt::T, method::AbstractRealizationMethod) where {T}\n\nComputes a left cholesky factor of the transition covariance of the model model, with step-size dt, using realization method method.\n\n\n\n\n\n","category":"method"},{"location":"#IntegratedWienerProcesses.transition_matrix-Union{Tuple{T}, Tuple{IWP{T}, Real, AbstractRealizationMethod}} where T","page":"Home","title":"IntegratedWienerProcesses.transition_matrix","text":"transition_matrix(model::IWP{T}, dt::Real, method::AbstractRealizationMethod) where {T}\n\nComputes the transition matrix of model model, using step-size dt, and realization method method.\n\n\n\n\n\n","category":"method"}]
}
